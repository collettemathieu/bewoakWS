import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, timer } from 'rxjs';
import { Toastr } from '../../shared/interface/toastr';

@Injectable({
  providedIn: 'root'
})
export class ToastrService {

  private toastr: BehaviorSubject<Toastr | null> = new BehaviorSubject(null);
  public readonly toastr$: Observable<Toastr | null> = this.toastr.asObservable();

  constructor() { }

  /**
   * Affiche un message d'avertissement à l'utilisateur
   * @param toastr toastr à afficher à l'utilisateur
   */
  public showMessage(toastr: Toastr): void {
    toastr.id = this.generateId();
    this.toastr.next(toastr);
  }

  /**
   * Generate unique IDs for use as pseudo-private/protected names.
   * Similar in concept to
   * <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
   * The goals of this function are twofold:
   * Provide a way to generate a string guaranteed to be unique when compared
   * to other strings generated by this function.
   * Make the string complex enough that it is highly unlikely to be
   * accidentally duplicated by hand (this is key if you're using `ID`
   * as a private/protected name on an object).
   */
  private generateId() {
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return '_' + Math.random().toString(36).substr(2, 9);
  }

}
